GAS LISTING /tmp/cc2rabi0.s 			page 1


   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/lucas-gabriel/Desktop/Embedded/ES455-RTOS/List-1-UART/",100,0,2,.Ltext0
   8               		.stabs	"main.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"__int128:t(0,6)=@s128;r(0,6);02000000000000000000000000000000000000000000;0177777777777777
  18               		.stabs	"__int128 unsigned:t(0,7)=@s128;r(0,7);0;03777777777777777777777777777777777777777777;",128
  19               		.stabs	"long long int:t(0,8)=@s64;r(0,8);01000000000000000000000;00777777777777777777777;",128,0,0
  20               		.stabs	"long long unsigned int:t(0,9)=@s64;r(0,9);0;01777777777777777777777;",128,0,0,0
  21               		.stabs	"short int:t(0,10)=r(0,10);-32768;32767;",128,0,0,0
  22               		.stabs	"short unsigned int:t(0,11)=r(0,11);0;0177777;",128,0,0,0
  23               		.stabs	"signed char:t(0,12)=@s8;r(0,12);-128;127;",128,0,0,0
  24               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  25               		.stabs	"float:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"double:t(0,15)=r(0,1);4;0;",128,0,0,0
  27               		.stabs	"long double:t(0,16)=r(0,1);4;0;",128,0,0,0
  28               		.stabs	"_Float32:t(0,17)=r(0,1);4;0;",128,0,0,0
  29               		.stabs	"short _Fract:t(0,18)=r(0,1);1;0;",128,0,0,0
  30               		.stabs	"_Fract:t(0,19)=r(0,1);2;0;",128,0,0,0
  31               		.stabs	"long _Fract:t(0,20)=r(0,1);4;0;",128,0,0,0
  32               		.stabs	"long long _Fract:t(0,21)=r(0,1);8;0;",128,0,0,0
  33               		.stabs	"unsigned short _Fract:t(0,22)=r(0,1);1;0;",128,0,0,0
  34               		.stabs	"unsigned _Fract:t(0,23)=r(0,1);2;0;",128,0,0,0
  35               		.stabs	"unsigned long _Fract:t(0,24)=r(0,1);4;0;",128,0,0,0
  36               		.stabs	"unsigned long long _Fract:t(0,25)=r(0,1);8;0;",128,0,0,0
  37               		.stabs	"_Sat short _Fract:t(0,26)=r(0,1);1;0;",128,0,0,0
  38               		.stabs	"_Sat _Fract:t(0,27)=r(0,1);2;0;",128,0,0,0
  39               		.stabs	"_Sat long _Fract:t(0,28)=r(0,1);4;0;",128,0,0,0
  40               		.stabs	"_Sat long long _Fract:t(0,29)=r(0,1);8;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned short _Fract:t(0,30)=r(0,1);1;0;",128,0,0,0
  42               		.stabs	"_Sat unsigned _Fract:t(0,31)=r(0,1);2;0;",128,0,0,0
  43               		.stabs	"_Sat unsigned long _Fract:t(0,32)=r(0,1);4;0;",128,0,0,0
  44               		.stabs	"_Sat unsigned long long _Fract:t(0,33)=r(0,1);8;0;",128,0,0,0
  45               		.stabs	"short _Accum:t(0,34)=r(0,1);2;0;",128,0,0,0
  46               		.stabs	"_Accum:t(0,35)=r(0,1);4;0;",128,0,0,0
  47               		.stabs	"long _Accum:t(0,36)=r(0,1);8;0;",128,0,0,0
  48               		.stabs	"long long _Accum:t(0,37)=r(0,1);8;0;",128,0,0,0
  49               		.stabs	"unsigned short _Accum:t(0,38)=r(0,1);2;0;",128,0,0,0
  50               		.stabs	"unsigned _Accum:t(0,39)=r(0,1);4;0;",128,0,0,0
  51               		.stabs	"unsigned long _Accum:t(0,40)=r(0,1);8;0;",128,0,0,0
  52               		.stabs	"unsigned long long _Accum:t(0,41)=r(0,1);8;0;",128,0,0,0
  53               		.stabs	"_Sat short _Accum:t(0,42)=r(0,1);2;0;",128,0,0,0
  54               		.stabs	"_Sat _Accum:t(0,43)=r(0,1);4;0;",128,0,0,0
  55               		.stabs	"_Sat long _Accum:t(0,44)=r(0,1);8;0;",128,0,0,0
  56               		.stabs	"_Sat long long _Accum:t(0,45)=r(0,1);8;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned short _Accum:t(0,46)=r(0,1);2;0;",128,0,0,0
GAS LISTING /tmp/cc2rabi0.s 			page 2


  58               		.stabs	"_Sat unsigned _Accum:t(0,47)=r(0,1);4;0;",128,0,0,0
  59               		.stabs	"_Sat unsigned long _Accum:t(0,48)=r(0,1);8;0;",128,0,0,0
  60               		.stabs	"_Sat unsigned long long _Accum:t(0,49)=r(0,1);8;0;",128,0,0,0
  61               		.stabs	"void:t(0,50)=(0,50)",128,0,0,0
  62               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
  63               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  64               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  65               		.stabs	"/usr/lib/gcc/avr/7.3.0/include/stdint.h",130,0,0,0
  66               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  67               		.stabs	"int8_t:t(5,1)=(0,12)",128,0,125,0
  68               		.stabs	"uint8_t:t(5,2)=(0,13)",128,0,126,0
  69               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,127,0
  70               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,128,0
  71               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,129,0
  72               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,130,0
  73               		.stabs	"int64_t:t(5,7)=(0,8)",128,0,132,0
  74               		.stabs	"uint64_t:t(5,8)=(0,9)",128,0,133,0
  75               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,146,0
  76               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,151,0
  77               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,163,0
  78               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,168,0
  79               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,173,0
  80               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,178,0
  81               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,183,0
  82               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,188,0
  83               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,196,0
  84               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,203,0
  85               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,217,0
  86               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,222,0
  87               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,227,0
  88               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,232,0
  89               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,237,0
  90               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,242,0
  91               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,250,0
  92               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,257,0
  93               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,277,0
  94               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,282,0
  95               		.stabn	162,0,0,0
  96               		.stabn	162,0,0,0
  97               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  98               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  99               		.stabn	162,0,0,0
 100               		.stabn	162,0,0,0
 101               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
 102               		.stabs	"__fuse_t:t(6,1)=(6,2)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,244,0
 103               		.stabn	162,0,0,0
 104               		.stabn	162,0,0,0
 105               		.stabs	"Set_LED.part.1:f(0,50)",36,0,355,Set_LED.part.1
 106               		.type	Set_LED.part.1, @function
 107               	Set_LED.part.1:
 108               		.stabd	46,0,0
   1:main.c        **** /* Necessário para funções e macros básicas */
   2:main.c        **** #include <avr/io.h>
   3:main.c        **** 
   4:main.c        **** /* Os próximos dois includes são necessários quando se usa interrupçoes */
   5:main.c        **** #include <avr/cpufunc.h>
   6:main.c        **** #include <avr/interrupt.h>
GAS LISTING /tmp/cc2rabi0.s 			page 3


   7:main.c        **** #include <util/delay.h>
   8:main.c        **** #include <stdint.h>
   9:main.c        **** 
  10:main.c        **** #define SCAPE       0x7d        // Prefix Character
  11:main.c        **** #define SYNC        0x7e        // Sync Character (Limit between packages)
  12:main.c        **** #define XON         0x11        // Flux Character
  13:main.c        **** #define XOFF        0x13        // Flux Character
  14:main.c        **** #define F_OSC       16000000    // CPU Frequency (16MHz)
  15:main.c        **** #define BAUD_RATE   9600        // USART baud rate
  16:main.c        **** 
  17:main.c        **** 
  18:main.c        **** /*====================================== GLOBAL VARIABLES ======================================*/
  19:main.c        **** uint8_t FlowControl = 1;      // 1: Flow on | 2: Flow Off
  20:main.c        **** uint8_t ReadyToSend  = 1;        // 1: USART is Ready to send another message | 2: USART is not rea
  21:main.c        **** uint8_t ByteReceived  = 0;       // 1: USART received a msg | 2: no message received
  22:main.c        **** 
  23:main.c        **** 
  24:main.c        **** /*====================================== FUNCTIONS USED ======================================*/
  25:main.c        **** // Mandatory
  26:main.c        **** uint8_t write(uint8_t* buf, uint8_t n, int8_t close_packet);	    // Writes buff in usart
  27:main.c        **** uint8_t read(uint8_t* buf, uint8_t n);                       	    // Reads data from USART
  28:main.c        **** void flow_off();                                              	    // Sends XOFF
  29:main.c        **** void flow_on();													    // Sends XON
  30:main.c        **** uint8_t is_flow_on();											    // Returns if flow is or or off
  31:main.c        **** 
  32:main.c        **** // Custom
  33:main.c        **** void CompareMsg(uint8_t* msg_1, uint8_t* msg_2, uint8_t n);		    // Compares 2 messages and turns L
  34:main.c        **** void SendByte(uint8_t buff);		                                // Blocks system until sends Byte
  35:main.c        **** uint8_t ReadByte();		                                            // Blocks system until receives By
  36:main.c        **** void Set_LED(uint8_t State);
  37:main.c        **** 
  38:main.c        **** // Mandatory Tests (1 and 5 are in the main)
  39:main.c        **** void task_2();
  40:main.c        **** void task_3();
  41:main.c        **** void task_4();
  42:main.c        **** void task_6();
  43:main.c        **** void task_7_A();
  44:main.c        **** void task_7_B();
  45:main.c        **** 
  46:main.c        **** 
  47:main.c        **** /*====================================== INTERRUPTS ======================================*/
  48:main.c        **** // Called when USART regiter receives a byte
  49:main.c        **** ISR(USART_RX_vect){
  50:main.c        ****     ByteReceived = 1;
  51:main.c        ****     if(UDR0 == XON){
  52:main.c        ****         flow_on();
  53:main.c        ****     }
  54:main.c        ****     if(UDR0 == XOFF){
  55:main.c        ****         flow_off();
  56:main.c        ****     }
  57:main.c        **** }
  58:main.c        **** 
  59:main.c        **** // Called when USART register can send another byte
  60:main.c        **** ISR(USART_UDRE_vect) {
  61:main.c        ****     ReadyToSend = 1;
  62:main.c        **** }
  63:main.c        **** 
GAS LISTING /tmp/cc2rabi0.s 			page 4


  64:main.c        **** 
  65:main.c        **** 
  66:main.c        **** int main(void) {
  67:main.c        **** 	/* Task 1 */
  68:main.c        ****     // 1: Turn off Led, setup USART
  69:main.c        ****     /*======= LED SETUP =======*/
  70:main.c        **** 	DDRB = 1 << PB5;			// Sets PB5 (LED) as output (DDR=1)
  71:main.c        ****     PORTB &= ~(1 << PB5);     	// Turns OFF LED
  72:main.c        **** 
  73:main.c        ****     /*======= USART SETUP =======*/
  74:main.c        ****     UCSR0A = 0;                                                 //
  75:main.c        ****     UCSR0B |= (1 << RXEN0) | (1 << TXEN0);                      // Enable Interrupts
  76:main.c        ****     UCSR0B |= (1 << RXCIE0) | (1 << UDRIE0);    // Enable Transmission and Reception
  77:main.c        ****     UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);                     // Sets that: 1 Byte = 8 bits
  78:main.c        **** 
  79:main.c        ****     // Transmission Speed
  80:main.c        ****     // UBRR =Fosc/(16* BaudRate) -1 => [16M/(16*9600)] - 1 = 103.166
  81:main.c        **** 	UBRR0H = 0;
  82:main.c        ****     UBRR0L = 103;
  83:main.c        **** 
  84:main.c        ****     // Enable Interrupts Globally
  85:main.c        ****     sei();
  86:main.c        ****     //flow_on();
  87:main.c        ****     /*------------------------------------------ REQUIRED TESTS -----------------------------------
  88:main.c        ****     /*======= 2.  =======*/
  89:main.c        ****     task_2();
  90:main.c        **** 
  91:main.c        ****     /*======= 3.  =======*/
  92:main.c        ****     task_3();
  93:main.c        ****     
  94:main.c        ****     /*======= 4.  =======*/
  95:main.c        **** //    task_4();
  96:main.c        **** 
  97:main.c        ****     /*======= 5.  =======*/
  98:main.c        **** //    task_4();                 // Repeat test 4
  99:main.c        ****     
 100:main.c        ****     /*======= 6.  =======*/
 101:main.c        **** //    Set_LED(0);     // Turns OFF LED
 102:main.c        **** //    task_6();                 // Test 6
 103:main.c        ****     
 104:main.c        ****     
 105:main.c        ****     /* Loop infinito necessário em qualquer programa para embarcados */
 106:main.c        ****     while (1) {
 107:main.c        ****         /*======= 7.  =======*/
 108:main.c        **** //        task_7_A();
 109:main.c        **** //        task_7_B();
 110:main.c        ****     task_2();
 111:main.c        ****  
 112:main.c        ****     }
 113:main.c        **** 
 114:main.c        ****     return 0;
 115:main.c        **** }
 116:main.c        **** 
 117:main.c        **** 
 118:main.c        **** 
 119:main.c        **** /*========================================== Functions ==========================================*/
 120:main.c        **** // sends n bytes from the buffer (buf)
GAS LISTING /tmp/cc2rabi0.s 			page 5


 121:main.c        **** uint8_t write(uint8_t* buf, uint8_t n, int8_t close_packet){
 122:main.c        ****     uint8_t msg_counter=0;
 123:main.c        **** 
 124:main.c        ****     // If flow is off, returns 0
 125:main.c        ****     if(is_flow_on()==0){
 126:main.c        ****         return 0;
 127:main.c        ****     }
 128:main.c        **** 
 129:main.c        ****    // if flow is on, sends the 'n' bytes of data
 130:main.c        ****     for(int i=0; i<n; i++){
 131:main.c        ****         // If receives XOFF, Stops transmission
 132:main.c        ****         if(is_flow_on()==0){
 133:main.c        ****             break;
 134:main.c        ****         }
 135:main.c        **** 
 136:main.c        ****         SendByte( *(buf+i) );       // Sends the byte via USART
 137:main.c        ****         msg_counter++;              // Updates Counter
 138:main.c        **** 
 139:main.c        ****     }
 140:main.c        **** 
 141:main.c        ****     // if close_packet is not zero, sends sync character at the end
 142:main.c        ****     if(close_packet !=0){
 143:main.c        ****         SendByte(SCAPE);    // Scape as prefix
 144:main.c        ****         SendByte(SYNC);     // sync        
 145:main.c        ****     }
 146:main.c        **** 
 147:main.c        ****     return msg_counter;
 148:main.c        **** }
 149:main.c        **** 
 150:main.c        **** 
 151:main.c        **** // Receives n bytes from serial and saves them on the buffer (buf)
 152:main.c        **** uint8_t read(uint8_t* buf, uint8_t n){
 153:main.c        **** 	uint8_t msg_counter=0;
 154:main.c        ****     uint8_t ByteBuffer =0;
 155:main.c        **** 
 156:main.c        ****   	// The maximum value of n must be 254
 157:main.c        ****   	if (n==255){
 158:main.c        ****     	n=254;
 159:main.c        ****   	}
 160:main.c        **** 
 161:main.c        **** 	// If flow is off, returns 0
 162:main.c        ****   	if(is_flow_on()==0){
 163:main.c        ****     	return 0;
 164:main.c        ****   	}
 165:main.c        **** 
 166:main.c        ****   	// if flow is on, reads the 'n' bytes of data
 167:main.c        ****   	for(int i=0; i<n; i++){
 168:main.c        ****         ByteBuffer= ReadByte();        
 169:main.c        **** 
 170:main.c        ****         // If it reads the sync character, stops reading
 171:main.c        ****         if(ByteBuffer == SYNC){
 172:main.c        ****             break;
 173:main.c        ****         }
 174:main.c        **** 
 175:main.c        ****         *(buf+i) = ByteBuffer;    // Saves data in the buffer 
 176:main.c        ****         msg_counter=i;              // Updates counter
 177:main.c        **** 
GAS LISTING /tmp/cc2rabi0.s 			page 6


 178:main.c        ****         // If it reads n messages before receiving the sync character, returns n+1
 179:main.c        ****         if( (i+1) == n ){
 180:main.c        ****             return n+1;
 181:main.c        ****         }
 182:main.c        ****     }
 183:main.c        **** 
 184:main.c        **** 	return msg_counter;
 185:main.c        **** }
 186:main.c        **** 
 187:main.c        **** 
 188:main.c        **** // Sends XOFF
 189:main.c        **** void flow_off(){
 190:main.c        ****     SendByte(SCAPE);    // SCAPE prefix before XON or XOFF
 191:main.c        ****     SendByte(XOFF);     //
 192:main.c        ****     FlowControl = 0;    // Sets flow control as off
 193:main.c        **** 
 194:main.c        **** }
 195:main.c        **** 
 196:main.c        **** // Sends XON
 197:main.c        **** void flow_on(){
 198:main.c        ****     SendByte(SCAPE);    // SCAPE prefix before XON or XOFF
 199:main.c        ****     SendByte(XON);      // Sedns XON
 200:main.c        ****     FlowControl = 1;  // Sets flow control as ON
 201:main.c        **** 
 202:main.c        **** }
 203:main.c        **** 
 204:main.c        **** // Detects if communication (flow) is on or off
 205:main.c        **** // 1 = flow is on | 0 = flow is off
 206:main.c        **** uint8_t is_flow_on(){
 207:main.c        ****   return FlowControl;
 208:main.c        **** }
 209:main.c        **** 
 210:main.c        **** 
 211:main.c        **** /*========================================== MANDATORY TEST FUNCTIONS =============================
 212:main.c        **** /* Task 2 */
 213:main.c        **** void task_2(){
 214:main.c        ****     uint8_t UFPE_DES[]= "Universidade Federal de Pernambuco\nDepartamento de Eletrônica e Sistemas
 215:main.c        ****     //uint8_t n_sent= write(UFPE_DES, sizeof(UFPE_DES)/sizeof(UFPE_DES[0]) , 1);
 216:main.c        **** 	uint8_t n_sent= write(UFPE_DES, 15 , 1);
 217:main.c        **** }
 218:main.c        **** 
 219:main.c        **** /* Task 3 */
 220:main.c        **** void task_3(){
 221:main.c        ****     uint8_t UFPE_DES[]= "Universidade Federal de Pernambuco\nDepartamento de Eletrônica e Sistemas
 222:main.c        ****     uint8_t n_sent= write(UFPE_DES,10, 1);
 223:main.c        **** }
 224:main.c        **** 
 225:main.c        **** /* Task 4 */
 226:main.c        **** void task_4(){
 227:main.c        ****     int MsgCounter = 0;
 228:main.c        ****     uint8_t ByteBuffer=0;
 229:main.c        ****     uint8_t Msg_buffer[303];
 230:main.c        **** 
 231:main.c        ****     // Reads 300 packages
 232:main.c        ****   	for(int i=0; i<300; i++){
 233:main.c        ****         ByteBuffer= ReadByte();    
 234:main.c        ****         // If it reads the sync character, stops reading
GAS LISTING /tmp/cc2rabi0.s 			page 7


 235:main.c        ****         if(ByteBuffer == SYNC){
 236:main.c        ****             break;
 237:main.c        ****         }
 238:main.c        ****         Msg_buffer[i] = ByteBuffer;
 239:main.c        ****         MsgCounter++;
 240:main.c        ****     }
 241:main.c        **** 
 242:main.c        ****     //After 300 reads, sends XOFF
 243:main.c        ****     if(MsgCounter==300){
 244:main.c        ****         flow_off();
 245:main.c        ****         _delay_ms(5); // blocks 5 ms
 246:main.c        ****     }
 247:main.c        **** 
 248:main.c        ****     //if it stops receiving messages, blinks LED at 1Hz for 5s (1 time per sec)
 249:main.c        ****     if(!ByteReceived){
 250:main.c        ****         for(int i=0;i<5;i++){
 251:main.c        ****             PINB ^= (1 << PB5);   //toogle led
 252:main.c        ****             _delay_ms(1000);      // wait 1s
 253:main.c        ****         }
 254:main.c        ****     }
 255:main.c        ****     // if the messages continue LED is turned on for 5s 
 256:main.c        ****     else{
 257:main.c        ****     Set_LED(1);              // Turns ON LED
 258:main.c        ****     _delay_ms(5000);        // Wait 5s
 259:main.c        ****     }
 260:main.c        **** 
 261:main.c        ****     Set_LED(0);     // Turns off LED
 262:main.c        **** }
 263:main.c        **** 
 264:main.c        **** /* Task 6 */
 265:main.c        **** void task_6(){
 266:main.c        ****     uint8_t Binary_String[]={0x00, 0x01, 0x11, 0x02, 0x13, 0x04, 0x7e, 0x05, 0x7d, 0x06};
 267:main.c        ****     uint8_t n_Bytes = sizeof(Binary_String)/sizeof(Binary_String[0]);
 268:main.c        ****     //turn off the LED:
 269:main.c        ****     Set_LED(0);
 270:main.c        **** 
 271:main.c        **** 
 272:main.c        ****     // Sends the binary string without sync character
 273:main.c        ****     uint8_t n_sent = write(Binary_String, n_Bytes, 0);
 274:main.c        ****     
 275:main.c        ****     // If the data wasnt all sent (received a XOFF in the middle)
 276:main.c        ****     while(n_sent < n_Bytes){
 277:main.c        ****         Set_LED(1);                                                 // Turns on LED
 278:main.c        ****         while(!is_flow_on()){};                                     // Hold the program until recei
 279:main.c        ****         Set_LED(0);                                                 // Sets LED =0;
 280:main.c        ****         n_sent = write(Binary_String+n_sent, n_Bytes-n_sent, 0);    // Resumes transmission (where 
 281:main.c        ****     }
 282:main.c        ****   
 283:main.c        **** }
 284:main.c        **** 
 285:main.c        **** /* Task 7.A */
 286:main.c        **** void task_7_A(){
 287:main.c        ****     // receive package
 288:main.c        ****     uint8_t msg_DSE[] ="Desenvolvimento de sistemas embarcados";
 289:main.c        ****     uint8_t buffer_1[100];
 290:main.c        ****     uint8_t msg_received;
 291:main.c        ****     
GAS LISTING /tmp/cc2rabi0.s 			page 8


 292:main.c        ****     // 7A: Read and compare Msg 1
 293:main.c        ****     msg_received= read(buffer_1,sizeof(msg_DSE));                   // Read package
 294:main.c        ****     CompareMsg(buffer_1, msg_DSE,sizeof(msg_DSE));    // Compare and Light the led (if the 2 are th
 295:main.c        ****     
 296:main.c        **** }
 297:main.c        **** 
 298:main.c        **** /* Task 7.B */
 299:main.c        **** void task_7_B(){
 300:main.c        ****     // receive package
 301:main.c        ****     uint8_t msg_DSE[] ="Desenvolvimento de sistemas embarcados";
 302:main.c        ****     uint8_t buffer_2[10];
 303:main.c        ****     uint8_t msg_received;
 304:main.c        **** 
 305:main.c        ****     // 7B: Read and compare Msg, but n=10
 306:main.c        ****     msg_received= read(buffer_2,10);                // Read package
 307:main.c        ****     CompareMsg(buffer_2, msg_DSE,10);               // Compare and Light the led (if the 2 are the 
 308:main.c        ****     
 309:main.c        **** }
 310:main.c        **** 
 311:main.c        **** /*====================================== OTHER FUNCTIONS USED =====================================
 312:main.c        **** void CompareMsg(uint8_t* msg_1, uint8_t* msg_2, uint8_t n){
 313:main.c        ****     uint8_t Is_equal = 1;
 314:main.c        **** 
 315:main.c        ****     // If they have different sizes, they are different
 316:main.c        ****     if(sizeof(msg_1) !=sizeof(msg_2)){
 317:main.c        ****         Is_equal = 0;
 318:main.c        ****     }
 319:main.c        **** 
 320:main.c        ****     // Compare array elementy wise
 321:main.c        ****     for(int i=0; i<n; i++){ 
 322:main.c        ****         // If any byte is different, returns 0
 323:main.c        ****         if( (*(msg_1+i) != *(msg_2+i)) ) {
 324:main.c        ****             Is_equal = 0;
 325:main.c        ****             break;
 326:main.c        ****         }
 327:main.c        ****     }
 328:main.c        **** 
 329:main.c        ****     // If the messages are the same, turns on LED, if not, turns off
 330:main.c        ****     if(Is_equal){
 331:main.c        ****         // Turns on LED
 332:main.c        ****         Set_LED(1); 
 333:main.c        ****     }
 334:main.c        ****     else{
 335:main.c        ****         // Turns off LED
 336:main.c        ****         Set_LED(0);
 337:main.c        ****     }
 338:main.c        **** }
 339:main.c        **** 
 340:main.c        **** void SendByte(uint8_t buff){
 341:main.c        ****     while (ReadyToSend==0);     // blocks until it can send 
 342:main.c        ****     UDR0 = buff;                // Sends byte
 343:main.c        ****     ReadyToSend = 0;        // Flag
 344:main.c        **** 
 345:main.c        **** }
 346:main.c        **** 
 347:main.c        **** uint8_t ReadByte(){
 348:main.c        ****     while (ByteReceived==0);         // blocks until it receives a byte 
GAS LISTING /tmp/cc2rabi0.s 			page 9


 349:main.c        ****     uint8_t ByteBuff = UDR0;        // Reads Received byte
 350:main.c        ****     ByteReceived = 0;               // Flag
 351:main.c        **** 
 352:main.c        ****     return ByteBuff;
 353:main.c        **** };
 354:main.c        **** 
 355:main.c        **** void Set_LED(uint8_t State){
 109               		.stabn	68,0,355,.LM0-.LFBB1
 110               	.LM0:
 111               	.LFBB1:
 112               	/* prologue: function */
 113               	/* frame size = 0 */
 114               	/* stack size = 0 */
 115               	.L__stack_usage = 0
 356:main.c        ****     if(State ==1){
 357:main.c        ****         PORTB |= (1 << PB5);    // Turns ON LED
 116               		.stabn	68,0,357,.LM1-.LFBB1
 117               	.LM1:
 118 0000 2D9A      		sbi 0x5,5
 119               	/* epilogue start */
 358:main.c        ****     }
 359:main.c        ****     else{
 360:main.c        ****         PORTB &= ~(1 << PB5);   // Turns off LED
 361:main.c        ****     }
 362:main.c        **** };
 120               		.stabn	68,0,362,.LM2-.LFBB1
 121               	.LM2:
 122 0002 0895      		ret
 123               		.size	Set_LED.part.1, .-Set_LED.part.1
 124               	.Lscope1:
 125               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 126               		.stabd	78,0,0
 127               		.stabs	"__vector_19:F(0,50)",36,0,60,__vector_19
 128               	.global	__vector_19
 129               		.type	__vector_19, @function
 130               	__vector_19:
 131               		.stabd	46,0,0
  60:main.c        ****     ReadyToSend = 1;
 132               		.stabn	68,0,60,.LM3-.LFBB2
 133               	.LM3:
 134               	.LFBB2:
 135 0004 1F92      		push r1
 136 0006 0F92      		push r0
 137 0008 0FB6      		in r0,__SREG__
 138 000a 0F92      		push r0
 139 000c 1124      		clr __zero_reg__
 140 000e 8F93      		push r24
 141               	/* prologue: Signal */
 142               	/* frame size = 0 */
 143               	/* stack size = 4 */
 144               	.L__stack_usage = 4
  61:main.c        **** }
 145               		.stabn	68,0,61,.LM4-.LFBB2
 146               	.LM4:
 147 0010 81E0      		ldi r24,lo8(1)
 148 0012 8093 0000 		sts ReadyToSend,r24
 149               	/* epilogue start */
GAS LISTING /tmp/cc2rabi0.s 			page 10


  62:main.c        **** 
 150               		.stabn	68,0,62,.LM5-.LFBB2
 151               	.LM5:
 152 0016 8F91      		pop r24
 153 0018 0F90      		pop r0
 154 001a 0FBE      		out __SREG__,r0
 155 001c 0F90      		pop r0
 156 001e 1F90      		pop r1
 157 0020 1895      		reti
 158               		.size	__vector_19, .-__vector_19
 159               	.Lscope2:
 160               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 161               		.stabd	78,0,0
 162               		.stabs	"is_flow_on:F(5,2)",36,0,206,is_flow_on
 163               	.global	is_flow_on
 164               		.type	is_flow_on, @function
 165               	is_flow_on:
 166               		.stabd	46,0,0
 206:main.c        ****   return FlowControl;
 167               		.stabn	68,0,206,.LM6-.LFBB3
 168               	.LM6:
 169               	.LFBB3:
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 0 */
 173               	.L__stack_usage = 0
 208:main.c        **** 
 174               		.stabn	68,0,208,.LM7-.LFBB3
 175               	.LM7:
 176 0022 8091 0000 		lds r24,FlowControl
 177               	/* epilogue start */
 178 0026 0895      		ret
 179               		.size	is_flow_on, .-is_flow_on
 180               	.Lscope3:
 181               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 182               		.stabd	78,0,0
 183               		.stabs	"SendByte:F(0,50)",36,0,340,SendByte
 184               		.stabs	"buff:P(5,2)",64,0,340,24
 185               	.global	SendByte
 186               		.type	SendByte, @function
 187               	SendByte:
 188               		.stabd	46,0,0
 340:main.c        ****     while (ReadyToSend==0);     // blocks until it can send 
 189               		.stabn	68,0,340,.LM8-.LFBB4
 190               	.LM8:
 191               	.LFBB4:
 192               	/* prologue: function */
 193               	/* frame size = 0 */
 194               	/* stack size = 0 */
 195               	.L__stack_usage = 0
 341:main.c        ****     UDR0 = buff;                // Sends byte
 196               		.stabn	68,0,341,.LM9-.LFBB4
 197               	.LM9:
 198 0028 9091 0000 		lds r25,ReadyToSend
 199 002c 9111      		cpse r25,__zero_reg__
 200 002e 00C0      		rjmp .L8
 201               	.L7:
GAS LISTING /tmp/cc2rabi0.s 			page 11


 202 0030 00C0      		rjmp .L7
 203               	.L8:
 342:main.c        ****     ReadyToSend = 0;        // Flag
 204               		.stabn	68,0,342,.LM10-.LFBB4
 205               	.LM10:
 206 0032 8093 C600 		sts 198,r24
 343:main.c        **** 
 207               		.stabn	68,0,343,.LM11-.LFBB4
 208               	.LM11:
 209 0036 1092 0000 		sts ReadyToSend,__zero_reg__
 210               	/* epilogue start */
 345:main.c        **** 
 211               		.stabn	68,0,345,.LM12-.LFBB4
 212               	.LM12:
 213 003a 0895      		ret
 214               		.size	SendByte, .-SendByte
 215               	.Lscope4:
 216               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 217               		.stabd	78,0,0
 218               		.stabs	"write:F(5,2)",36,0,121,write
 219               		.stabs	"n:P(5,2)",64,0,121,22
 220               		.stabs	"close_packet:P(5,1)",64,0,121,20
 221               	.global	write
 222               		.type	write, @function
 223               	write:
 224               		.stabd	46,0,0
 121:main.c        ****     uint8_t msg_counter=0;
 225               		.stabn	68,0,121,.LM13-.LFBB5
 226               	.LM13:
 227               	.LFBB5:
 228 003c CF92      		push r12
 229 003e DF92      		push r13
 230 0040 EF92      		push r14
 231 0042 FF92      		push r15
 232 0044 0F93      		push r16
 233 0046 1F93      		push r17
 234 0048 CF93      		push r28
 235 004a DF93      		push r29
 236               	/* prologue: function */
 237               	/* frame size = 0 */
 238               	/* stack size = 8 */
 239               	.L__stack_usage = 8
 240               	.LBB49:
 241               	.LBB50:
 207:main.c        **** }
 242               		.stabn	68,0,207,.LM14-.LFBB5
 243               	.LM14:
 244 004c D090 0000 		lds r13,FlowControl
 245               	.LBE50:
 246               	.LBE49:
 125:main.c        ****         return 0;
 247               		.stabn	68,0,125,.LM15-.LFBB5
 248               	.LM15:
 249 0050 DD20      		tst r13
 250 0052 01F0      		breq .L9
 251 0054 C42E      		mov r12,r20
 252 0056 7C01      		movw r14,r24
GAS LISTING /tmp/cc2rabi0.s 			page 12


 253               	.LBB51:
 254               	.LBB52:
 255               	.LBB53:
 130:main.c        ****         // If receives XOFF, Stops transmission
 256               		.stabn	68,0,130,.LM16-.LFBB5
 257               	.LM16:
 258 0058 10E0      		ldi r17,0
 259 005a 00E0      		ldi r16,0
 260 005c C62F      		mov r28,r22
 261 005e D0E0      		ldi r29,0
 262               	.L11:
 263 0060 D02E      		mov r13,r16
 264 0062 0C17      		cp r16,r28
 265 0064 1D07      		cpc r17,r29
 266 0066 04F4      		brge .L15
 132:main.c        ****             break;
 267               		.stabn	68,0,132,.LM17-.LFBB5
 268               	.LM17:
 269 0068 8091 0000 		lds r24,FlowControl
 270 006c 8111      		cpse r24,__zero_reg__
 271 006e 00C0      		rjmp .L12
 272               	.L15:
 273               	.LBE53:
 142:main.c        ****         SendByte(SCAPE);    // Scape as prefix
 274               		.stabn	68,0,142,.LM18-.LFBB5
 275               	.LM18:
 276 0070 CC20      		tst r12
 277 0072 01F0      		breq .L9
 143:main.c        ****         SendByte(SYNC);     // sync        
 278               		.stabn	68,0,143,.LM19-.LFBB5
 279               	.LM19:
 280 0074 8DE7      		ldi r24,lo8(125)
 281 0076 0E94 0000 		call SendByte
 144:main.c        ****     }
 282               		.stabn	68,0,144,.LM20-.LFBB5
 283               	.LM20:
 284 007a 8EE7      		ldi r24,lo8(126)
 285 007c 0E94 0000 		call SendByte
 286               	.L9:
 287               	.LBE52:
 288               	.LBE51:
 148:main.c        **** 
 289               		.stabn	68,0,148,.LM21-.LFBB5
 290               	.LM21:
 291 0080 8D2D      		mov r24,r13
 292               	/* epilogue start */
 293 0082 DF91      		pop r29
 294 0084 CF91      		pop r28
 295 0086 1F91      		pop r17
 296 0088 0F91      		pop r16
 297 008a FF90      		pop r15
 298 008c EF90      		pop r14
 299 008e DF90      		pop r13
 300 0090 CF90      		pop r12
 301 0092 0895      		ret
 302               	.L12:
 303               	.LBB56:
GAS LISTING /tmp/cc2rabi0.s 			page 13


 304               	.LBB55:
 305               	.LBB54:
 136:main.c        ****         msg_counter++;              // Updates Counter
 306               		.stabn	68,0,136,.LM22-.LFBB5
 307               	.LM22:
 308 0094 F701      		movw r30,r14
 309 0096 8191      		ld r24,Z+
 310 0098 7F01      		movw r14,r30
 311 009a 0E94 0000 		call SendByte
 130:main.c        ****         // If receives XOFF, Stops transmission
 312               		.stabn	68,0,130,.LM23-.LFBB5
 313               	.LM23:
 314 009e 0F5F      		subi r16,-1
 315 00a0 1F4F      		sbci r17,-1
 316 00a2 00C0      		rjmp .L11
 317               	.LBE54:
 318               	.LBE55:
 319               	.LBE56:
 320               		.size	write, .-write
 321               		.stabs	"msg_counter:r(5,2)",64,0,122,13
 322               		.stabn	192,0,0,.LBB52-.LFBB5
 323               		.stabs	"i:r(0,1)",64,0,130,16
 324               		.stabn	192,0,0,.LBB53-.LFBB5
 325               		.stabn	224,0,0,.LBE53-.LFBB5
 326               		.stabs	"i:r(0,1)",64,0,130,16
 327               		.stabn	192,0,0,.LBB54-.LFBB5
 328               		.stabn	224,0,0,.LBE54-.LFBB5
 329               		.stabn	224,0,0,.LBE52-.LFBB5
 330               		.stabs	"msg_counter:r(5,2)",64,0,122,13
 331               		.stabn	192,0,0,.LBB55-.LFBB5
 332               		.stabn	224,0,0,.LBE55-.LFBB5
 333               	.Lscope5:
 334               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 335               		.stabd	78,0,0
 336               		.section	.rodata.str1.1,"aMS",@progbits,1
 337               	.LC1:
 338 0000 556E 6976 		.string	"Universidade Federal de Pernambuco\nDepartamento de Eletr\303\264nica e Sistemas"
 338      6572 7369 
 338      6461 6465 
 338      2046 6564 
 338      6572 616C 
 339               		.text
 340               		.stabs	"task_2:F(0,50)",36,0,213,task_2
 341               	.global	task_2
 342               		.type	task_2, @function
 343               	task_2:
 344               		.stabd	46,0,0
 213:main.c        ****     uint8_t UFPE_DES[]= "Universidade Federal de Pernambuco\nDepartamento de Eletrônica e Sistemas
 345               		.stabn	68,0,213,.LM24-.LFBB6
 346               	.LM24:
 347               	.LFBB6:
 348 00a4 CF93      		push r28
 349 00a6 DF93      		push r29
 350 00a8 CDB7      		in r28,__SP_L__
 351 00aa DEB7      		in r29,__SP_H__
 352 00ac CA54      		subi r28,74
 353 00ae D109      		sbc r29,__zero_reg__
GAS LISTING /tmp/cc2rabi0.s 			page 14


 354 00b0 0FB6      		in __tmp_reg__,__SREG__
 355 00b2 F894      		cli
 356 00b4 DEBF      		out __SP_H__,r29
 357 00b6 0FBE      		out __SREG__,__tmp_reg__
 358 00b8 CDBF      		out __SP_L__,r28
 359               	/* prologue: function */
 360               	/* frame size = 74 */
 361               	/* stack size = 76 */
 362               	.L__stack_usage = 76
 214:main.c        ****     //uint8_t n_sent= write(UFPE_DES, sizeof(UFPE_DES)/sizeof(UFPE_DES[0]) , 1);
 363               		.stabn	68,0,214,.LM25-.LFBB6
 364               	.LM25:
 365 00ba 8AE4      		ldi r24,lo8(74)
 366 00bc E0E0      		ldi r30,lo8(.LC1)
 367 00be F0E0      		ldi r31,hi8(.LC1)
 368 00c0 DE01      		movw r26,r28
 369 00c2 1196      		adiw r26,1
 370               		0:
 371 00c4 0190      		ld r0,Z+
 372 00c6 0D92      		st X+,r0
 373 00c8 8A95      		dec r24
 374 00ca 01F4      		brne 0b
 216:main.c        **** }
 375               		.stabn	68,0,216,.LM26-.LFBB6
 376               	.LM26:
 377 00cc 41E0      		ldi r20,lo8(1)
 378 00ce 6FE0      		ldi r22,lo8(15)
 379 00d0 CE01      		movw r24,r28
 380 00d2 0196      		adiw r24,1
 381 00d4 0E94 0000 		call write
 382               	/* epilogue start */
 217:main.c        **** 
 383               		.stabn	68,0,217,.LM27-.LFBB6
 384               	.LM27:
 385 00d8 C65B      		subi r28,-74
 386 00da DF4F      		sbci r29,-1
 387 00dc 0FB6      		in __tmp_reg__,__SREG__
 388 00de F894      		cli
 389 00e0 DEBF      		out __SP_H__,r29
 390 00e2 0FBE      		out __SREG__,__tmp_reg__
 391 00e4 CDBF      		out __SP_L__,r28
 392 00e6 DF91      		pop r29
 393 00e8 CF91      		pop r28
 394 00ea 0895      		ret
 395               		.size	task_2, .-task_2
 396               		.stabs	"UFPE_DES:(0,51)=ar(0,52)=r(0,52);0;0177777;;0;73;(5,2)",128,0,214,1
 397               		.stabn	192,0,0,.LFBB6-.LFBB6
 398               		.stabn	224,0,0,.Lscope6-.LFBB6
 399               	.Lscope6:
 400               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 401               		.stabd	78,0,0
 402               		.stabs	"task_3:F(0,50)",36,0,220,task_3
 403               	.global	task_3
 404               		.type	task_3, @function
 405               	task_3:
 406               		.stabd	46,0,0
 220:main.c        ****     uint8_t UFPE_DES[]= "Universidade Federal de Pernambuco\nDepartamento de Eletrônica e Sistemas
GAS LISTING /tmp/cc2rabi0.s 			page 15


 407               		.stabn	68,0,220,.LM28-.LFBB7
 408               	.LM28:
 409               	.LFBB7:
 410 00ec CF93      		push r28
 411 00ee DF93      		push r29
 412 00f0 CDB7      		in r28,__SP_L__
 413 00f2 DEB7      		in r29,__SP_H__
 414 00f4 CA54      		subi r28,74
 415 00f6 D109      		sbc r29,__zero_reg__
 416 00f8 0FB6      		in __tmp_reg__,__SREG__
 417 00fa F894      		cli
 418 00fc DEBF      		out __SP_H__,r29
 419 00fe 0FBE      		out __SREG__,__tmp_reg__
 420 0100 CDBF      		out __SP_L__,r28
 421               	/* prologue: function */
 422               	/* frame size = 74 */
 423               	/* stack size = 76 */
 424               	.L__stack_usage = 76
 221:main.c        ****     uint8_t n_sent= write(UFPE_DES,10, 1);
 425               		.stabn	68,0,221,.LM29-.LFBB7
 426               	.LM29:
 427 0102 8AE4      		ldi r24,lo8(74)
 428 0104 E0E0      		ldi r30,lo8(.LC1)
 429 0106 F0E0      		ldi r31,hi8(.LC1)
 430 0108 DE01      		movw r26,r28
 431 010a 1196      		adiw r26,1
 432               		0:
 433 010c 0190      		ld r0,Z+
 434 010e 0D92      		st X+,r0
 435 0110 8A95      		dec r24
 436 0112 01F4      		brne 0b
 222:main.c        **** }
 437               		.stabn	68,0,222,.LM30-.LFBB7
 438               	.LM30:
 439 0114 41E0      		ldi r20,lo8(1)
 440 0116 6AE0      		ldi r22,lo8(10)
 441 0118 CE01      		movw r24,r28
 442 011a 0196      		adiw r24,1
 443 011c 0E94 0000 		call write
 444               	/* epilogue start */
 223:main.c        **** 
 445               		.stabn	68,0,223,.LM31-.LFBB7
 446               	.LM31:
 447 0120 C65B      		subi r28,-74
 448 0122 DF4F      		sbci r29,-1
 449 0124 0FB6      		in __tmp_reg__,__SREG__
 450 0126 F894      		cli
 451 0128 DEBF      		out __SP_H__,r29
 452 012a 0FBE      		out __SREG__,__tmp_reg__
 453 012c CDBF      		out __SP_L__,r28
 454 012e DF91      		pop r29
 455 0130 CF91      		pop r28
 456 0132 0895      		ret
 457               		.size	task_3, .-task_3
 458               		.stabs	"UFPE_DES:(0,51)",128,0,221,1
 459               		.stabn	192,0,0,.LFBB7-.LFBB7
 460               		.stabn	224,0,0,.Lscope7-.LFBB7
GAS LISTING /tmp/cc2rabi0.s 			page 16


 461               	.Lscope7:
 462               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 463               		.stabd	78,0,0
 464               		.section	.text.startup,"ax",@progbits
 465               		.stabs	"main:F(0,1)",36,0,66,main
 466               	.global	main
 467               		.type	main, @function
 468               	main:
 469               		.stabd	46,0,0
  66:main.c        **** 	/* Task 1 */
 470               		.stabn	68,0,66,.LM32-.LFBB8
 471               	.LM32:
 472               	.LFBB8:
 473               	/* prologue: function */
 474               	/* frame size = 0 */
 475               	/* stack size = 0 */
 476               	.L__stack_usage = 0
  70:main.c        ****     PORTB &= ~(1 << PB5);     	// Turns OFF LED
 477               		.stabn	68,0,70,.LM33-.LFBB8
 478               	.LM33:
 479 0000 80E2      		ldi r24,lo8(32)
 480 0002 84B9      		out 0x4,r24
  71:main.c        **** 
 481               		.stabn	68,0,71,.LM34-.LFBB8
 482               	.LM34:
 483 0004 2D98      		cbi 0x5,5
  74:main.c        ****     UCSR0B |= (1 << RXEN0) | (1 << TXEN0);                      // Enable Interrupts
 484               		.stabn	68,0,74,.LM35-.LFBB8
 485               	.LM35:
 486 0006 1092 C000 		sts 192,__zero_reg__
  75:main.c        ****     UCSR0B |= (1 << RXCIE0) | (1 << UDRIE0);    // Enable Transmission and Reception
 487               		.stabn	68,0,75,.LM36-.LFBB8
 488               	.LM36:
 489 000a 8091 C100 		lds r24,193
 490 000e 8861      		ori r24,lo8(24)
 491 0010 8093 C100 		sts 193,r24
  76:main.c        ****     UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);                     // Sets that: 1 Byte = 8 bits
 492               		.stabn	68,0,76,.LM37-.LFBB8
 493               	.LM37:
 494 0014 8091 C100 		lds r24,193
 495 0018 806A      		ori r24,lo8(-96)
 496 001a 8093 C100 		sts 193,r24
  77:main.c        **** 
 497               		.stabn	68,0,77,.LM38-.LFBB8
 498               	.LM38:
 499 001e 86E0      		ldi r24,lo8(6)
 500 0020 8093 C200 		sts 194,r24
  81:main.c        ****     UBRR0L = 103;
 501               		.stabn	68,0,81,.LM39-.LFBB8
 502               	.LM39:
 503 0024 1092 C500 		sts 197,__zero_reg__
  82:main.c        **** 
 504               		.stabn	68,0,82,.LM40-.LFBB8
 505               	.LM40:
 506 0028 87E6      		ldi r24,lo8(103)
 507 002a 8093 C400 		sts 196,r24
  85:main.c        ****     //flow_on();
GAS LISTING /tmp/cc2rabi0.s 			page 17


 508               		.stabn	68,0,85,.LM41-.LFBB8
 509               	.LM41:
 510               	/* #APP */
 511               	 ;  85 "main.c" 1
 512 002e 7894      		sei
 513               	 ;  0 "" 2
  89:main.c        **** 
 514               		.stabn	68,0,89,.LM42-.LFBB8
 515               	.LM42:
 516               	/* #NOAPP */
 517 0030 0E94 0000 		call task_2
  92:main.c        ****     
 518               		.stabn	68,0,92,.LM43-.LFBB8
 519               	.LM43:
 520 0034 0E94 0000 		call task_3
 521               	.L22:
 110:main.c        ****  
 522               		.stabn	68,0,110,.LM44-.LFBB8
 523               	.LM44:
 524 0038 0E94 0000 		call task_2
 525 003c 00C0      		rjmp .L22
 526               		.size	main, .-main
 527               	.Lscope8:
 528               		.stabs	"",36,0,0,.Lscope8-.LFBB8
 529               		.stabd	78,0,0
 530               		.text
 531               		.stabs	"flow_off:F(0,50)",36,0,189,flow_off
 532               	.global	flow_off
 533               		.type	flow_off, @function
 534               	flow_off:
 535               		.stabd	46,0,0
 189:main.c        ****     SendByte(SCAPE);    // SCAPE prefix before XON or XOFF
 536               		.stabn	68,0,189,.LM45-.LFBB9
 537               	.LM45:
 538               	.LFBB9:
 539               	/* prologue: function */
 540               	/* frame size = 0 */
 541               	/* stack size = 0 */
 542               	.L__stack_usage = 0
 190:main.c        ****     SendByte(XOFF);     //
 543               		.stabn	68,0,190,.LM46-.LFBB9
 544               	.LM46:
 545 0134 8DE7      		ldi r24,lo8(125)
 546 0136 0E94 0000 		call SendByte
 191:main.c        ****     FlowControl = 0;    // Sets flow control as off
 547               		.stabn	68,0,191,.LM47-.LFBB9
 548               	.LM47:
 549 013a 83E1      		ldi r24,lo8(19)
 550 013c 0E94 0000 		call SendByte
 192:main.c        **** 
 551               		.stabn	68,0,192,.LM48-.LFBB9
 552               	.LM48:
 553 0140 1092 0000 		sts FlowControl,__zero_reg__
 554               	/* epilogue start */
 194:main.c        **** 
 555               		.stabn	68,0,194,.LM49-.LFBB9
 556               	.LM49:
GAS LISTING /tmp/cc2rabi0.s 			page 18


 557 0144 0895      		ret
 558               		.size	flow_off, .-flow_off
 559               	.Lscope9:
 560               		.stabs	"",36,0,0,.Lscope9-.LFBB9
 561               		.stabd	78,0,0
 562               		.stabs	"flow_on:F(0,50)",36,0,197,flow_on
 563               	.global	flow_on
 564               		.type	flow_on, @function
 565               	flow_on:
 566               		.stabd	46,0,0
 197:main.c        ****     SendByte(SCAPE);    // SCAPE prefix before XON or XOFF
 567               		.stabn	68,0,197,.LM50-.LFBB10
 568               	.LM50:
 569               	.LFBB10:
 570               	/* prologue: function */
 571               	/* frame size = 0 */
 572               	/* stack size = 0 */
 573               	.L__stack_usage = 0
 198:main.c        ****     SendByte(XON);      // Sedns XON
 574               		.stabn	68,0,198,.LM51-.LFBB10
 575               	.LM51:
 576 0146 8DE7      		ldi r24,lo8(125)
 577 0148 0E94 0000 		call SendByte
 199:main.c        ****     FlowControl = 1;  // Sets flow control as ON
 578               		.stabn	68,0,199,.LM52-.LFBB10
 579               	.LM52:
 580 014c 81E1      		ldi r24,lo8(17)
 581 014e 0E94 0000 		call SendByte
 200:main.c        **** 
 582               		.stabn	68,0,200,.LM53-.LFBB10
 583               	.LM53:
 584 0152 81E0      		ldi r24,lo8(1)
 585 0154 8093 0000 		sts FlowControl,r24
 586               	/* epilogue start */
 202:main.c        **** 
 587               		.stabn	68,0,202,.LM54-.LFBB10
 588               	.LM54:
 589 0158 0895      		ret
 590               		.size	flow_on, .-flow_on
 591               	.Lscope10:
 592               		.stabs	"",36,0,0,.Lscope10-.LFBB10
 593               		.stabd	78,0,0
 594               		.stabs	"__vector_18:F(0,50)",36,0,49,__vector_18
 595               	.global	__vector_18
 596               		.type	__vector_18, @function
 597               	__vector_18:
 598               		.stabd	46,0,0
  49:main.c        ****     ByteReceived = 1;
 599               		.stabn	68,0,49,.LM55-.LFBB11
 600               	.LM55:
 601               	.LFBB11:
 602 015a 1F92      		push r1
 603 015c 0F92      		push r0
 604 015e 0FB6      		in r0,__SREG__
 605 0160 0F92      		push r0
 606 0162 1124      		clr __zero_reg__
 607 0164 2F93      		push r18
GAS LISTING /tmp/cc2rabi0.s 			page 19


 608 0166 3F93      		push r19
 609 0168 4F93      		push r20
 610 016a 5F93      		push r21
 611 016c 6F93      		push r22
 612 016e 7F93      		push r23
 613 0170 8F93      		push r24
 614 0172 9F93      		push r25
 615 0174 AF93      		push r26
 616 0176 BF93      		push r27
 617 0178 EF93      		push r30
 618 017a FF93      		push r31
 619               	/* prologue: Signal */
 620               	/* frame size = 0 */
 621               	/* stack size = 15 */
 622               	.L__stack_usage = 15
  50:main.c        ****     if(UDR0 == XON){
 623               		.stabn	68,0,50,.LM56-.LFBB11
 624               	.LM56:
 625 017c 81E0      		ldi r24,lo8(1)
 626 017e 8093 0000 		sts ByteReceived,r24
  51:main.c        ****         flow_on();
 627               		.stabn	68,0,51,.LM57-.LFBB11
 628               	.LM57:
 629 0182 8091 C600 		lds r24,198
 630 0186 8131      		cpi r24,lo8(17)
 631 0188 01F4      		brne .L26
  52:main.c        ****     }
 632               		.stabn	68,0,52,.LM58-.LFBB11
 633               	.LM58:
 634 018a 0E94 0000 		call flow_on
 635               	.L26:
  54:main.c        ****         flow_off();
 636               		.stabn	68,0,54,.LM59-.LFBB11
 637               	.LM59:
 638 018e 8091 C600 		lds r24,198
 639 0192 8331      		cpi r24,lo8(19)
 640 0194 01F4      		brne .L25
  55:main.c        ****     }
 641               		.stabn	68,0,55,.LM60-.LFBB11
 642               	.LM60:
 643 0196 0E94 0000 		call flow_off
 644               	.L25:
 645               	/* epilogue start */
  57:main.c        **** 
 646               		.stabn	68,0,57,.LM61-.LFBB11
 647               	.LM61:
 648 019a FF91      		pop r31
 649 019c EF91      		pop r30
 650 019e BF91      		pop r27
 651 01a0 AF91      		pop r26
 652 01a2 9F91      		pop r25
 653 01a4 8F91      		pop r24
 654 01a6 7F91      		pop r23
 655 01a8 6F91      		pop r22
 656 01aa 5F91      		pop r21
 657 01ac 4F91      		pop r20
 658 01ae 3F91      		pop r19
GAS LISTING /tmp/cc2rabi0.s 			page 20


 659 01b0 2F91      		pop r18
 660 01b2 0F90      		pop r0
 661 01b4 0FBE      		out __SREG__,r0
 662 01b6 0F90      		pop r0
 663 01b8 1F90      		pop r1
 664 01ba 1895      		reti
 665               		.size	__vector_18, .-__vector_18
 666               	.Lscope11:
 667               		.stabs	"",36,0,0,.Lscope11-.LFBB11
 668               		.stabd	78,0,0
 669               		.stabs	"ReadByte:F(5,2)",36,0,347,ReadByte
 670               	.global	ReadByte
 671               		.type	ReadByte, @function
 672               	ReadByte:
 673               		.stabd	46,0,0
 347:main.c        ****     while (ByteReceived==0);         // blocks until it receives a byte 
 674               		.stabn	68,0,347,.LM62-.LFBB12
 675               	.LM62:
 676               	.LFBB12:
 677               	/* prologue: function */
 678               	/* frame size = 0 */
 679               	/* stack size = 0 */
 680               	.L__stack_usage = 0
 348:main.c        ****     uint8_t ByteBuff = UDR0;        // Reads Received byte
 681               		.stabn	68,0,348,.LM63-.LFBB12
 682               	.LM63:
 683 01bc 8091 0000 		lds r24,ByteReceived
 684 01c0 8111      		cpse r24,__zero_reg__
 685 01c2 00C0      		rjmp .L32
 686               	.L31:
 687 01c4 00C0      		rjmp .L31
 688               	.L32:
 349:main.c        ****     ByteReceived = 0;               // Flag
 689               		.stabn	68,0,349,.LM64-.LFBB12
 690               	.LM64:
 691 01c6 8091 C600 		lds r24,198
 350:main.c        **** 
 692               		.stabn	68,0,350,.LM65-.LFBB12
 693               	.LM65:
 694 01ca 1092 0000 		sts ByteReceived,__zero_reg__
 695               	/* epilogue start */
 353:main.c        **** 
 696               		.stabn	68,0,353,.LM66-.LFBB12
 697               	.LM66:
 698 01ce 0895      		ret
 699               		.size	ReadByte, .-ReadByte
 700               		.stabs	"ByteBuff:r(5,2)",64,0,349,24
 701               		.stabn	192,0,0,.LFBB12-.LFBB12
 702               		.stabn	224,0,0,.Lscope12-.LFBB12
 703               	.Lscope12:
 704               		.stabs	"",36,0,0,.Lscope12-.LFBB12
 705               		.stabd	78,0,0
 706               		.stabs	"read:F(5,2)",36,0,152,read
 707               		.stabs	"n:P(5,2)",64,0,152,29
 708               	.global	read
 709               		.type	read, @function
 710               	read:
GAS LISTING /tmp/cc2rabi0.s 			page 21


 711               		.stabd	46,0,0
 152:main.c        **** 	uint8_t msg_counter=0;
 712               		.stabn	68,0,152,.LM67-.LFBB13
 713               	.LM67:
 714               	.LFBB13:
 715 01d0 CF92      		push r12
 716 01d2 DF92      		push r13
 717 01d4 EF92      		push r14
 718 01d6 FF92      		push r15
 719 01d8 0F93      		push r16
 720 01da 1F93      		push r17
 721 01dc CF93      		push r28
 722 01de DF93      		push r29
 723               	/* prologue: function */
 724               	/* frame size = 0 */
 725               	/* stack size = 8 */
 726               	.L__stack_usage = 8
 727 01e0 D62F      		mov r29,r22
 157:main.c        ****     	n=254;
 728               		.stabn	68,0,157,.LM68-.LFBB13
 729               	.LM68:
 730 01e2 6F3F      		cpi r22,lo8(-1)
 731 01e4 01F4      		brne .L34
 158:main.c        ****   	}
 732               		.stabn	68,0,158,.LM69-.LFBB13
 733               	.LM69:
 734 01e6 DEEF      		ldi r29,lo8(-2)
 735               	.L34:
 736               	.LBB57:
 737               	.LBB58:
 207:main.c        **** }
 738               		.stabn	68,0,207,.LM70-.LFBB13
 739               	.LM70:
 740 01e8 C091 0000 		lds r28,FlowControl
 741               	.LBE58:
 742               	.LBE57:
 162:main.c        ****     	return 0;
 743               		.stabn	68,0,162,.LM71-.LFBB13
 744               	.LM71:
 745 01ec C111      		cpse r28,__zero_reg__
 746 01ee 00C0      		rjmp .L46
 747               	.L33:
 185:main.c        **** 
 748               		.stabn	68,0,185,.LM72-.LFBB13
 749               	.LM72:
 750 01f0 8C2F      		mov r24,r28
 751               	/* epilogue start */
 752 01f2 DF91      		pop r29
 753 01f4 CF91      		pop r28
 754 01f6 1F91      		pop r17
 755 01f8 0F91      		pop r16
 756 01fa FF90      		pop r15
 757 01fc EF90      		pop r14
 758 01fe DF90      		pop r13
 759 0200 CF90      		pop r12
 760 0202 0895      		ret
 761               	.L46:
GAS LISTING /tmp/cc2rabi0.s 			page 22


 762 0204 7C01      		movw r14,r24
 763               	.LBB59:
 167:main.c        ****         ByteBuffer= ReadByte();        
 764               		.stabn	68,0,167,.LM73-.LFBB13
 765               	.LM73:
 766 0206 10E0      		ldi r17,0
 767 0208 00E0      		ldi r16,0
 768               	.LBE59:
 153:main.c        ****     uint8_t ByteBuffer =0;
 769               		.stabn	68,0,153,.LM74-.LFBB13
 770               	.LM74:
 771 020a C0E0      		ldi r28,0
 772               	.LBB60:
 167:main.c        ****         ByteBuffer= ReadByte();        
 773               		.stabn	68,0,167,.LM75-.LFBB13
 774               	.LM75:
 775 020c CD2E      		mov r12,r29
 776 020e D12C      		mov r13,__zero_reg__
 777               	.L37:
 167:main.c        ****         ByteBuffer= ReadByte();        
 778               		.stabn	68,0,167,.LM76-.LFBB13
 779               	.LM76:
 780 0210 0C15      		cp r16,r12
 781 0212 1D05      		cpc r17,r13
 782 0214 04F4      		brge .L33
 168:main.c        **** 
 783               		.stabn	68,0,168,.LM77-.LFBB13
 784               	.LM77:
 785 0216 0E94 0000 		call ReadByte
 171:main.c        ****             break;
 786               		.stabn	68,0,171,.LM78-.LFBB13
 787               	.LM78:
 788 021a 8E37      		cpi r24,lo8(126)
 789 021c 01F0      		breq .L33
 175:main.c        ****         msg_counter=i;              // Updates counter
 790               		.stabn	68,0,175,.LM79-.LFBB13
 791               	.LM79:
 792 021e F701      		movw r30,r14
 793 0220 8193      		st Z+,r24
 794 0222 7F01      		movw r14,r30
 176:main.c        **** 
 795               		.stabn	68,0,176,.LM80-.LFBB13
 796               	.LM80:
 797 0224 C02F      		mov r28,r16
 179:main.c        ****             return n+1;
 798               		.stabn	68,0,179,.LM81-.LFBB13
 799               	.LM81:
 800 0226 0F5F      		subi r16,-1
 801 0228 1F4F      		sbci r17,-1
 802 022a 0C15      		cp r16,r12
 803 022c 1D05      		cpc r17,r13
 804 022e 01F4      		brne .L37
 180:main.c        ****         }
 805               		.stabn	68,0,180,.LM82-.LFBB13
 806               	.LM82:
 807 0230 C1E0      		ldi r28,lo8(1)
 808 0232 CD0F      		add r28,r29
GAS LISTING /tmp/cc2rabi0.s 			page 23


 809 0234 00C0      		rjmp .L33
 810               	.LBE60:
 811               		.size	read, .-read
 812               		.stabs	"msg_counter:r(5,2)",64,0,153,28
 813               		.stabs	"ByteBuffer:r(5,2)",64,0,154,24
 814               		.stabn	192,0,0,.LFBB13-.LFBB13
 815               		.stabs	"i:r(0,1)",64,0,167,16
 816               		.stabn	192,0,0,.LBB59-.LFBB13
 817               		.stabn	224,0,0,.LBE59-.LFBB13
 818               		.stabs	"i:r(0,1)",64,0,167,16
 819               		.stabn	192,0,0,.LBB60-.LFBB13
 820               		.stabn	224,0,0,.LBE60-.LFBB13
 821               		.stabn	224,0,0,.Lscope13-.LFBB13
 822               	.Lscope13:
 823               		.stabs	"",36,0,0,.Lscope13-.LFBB13
 824               		.stabd	78,0,0
 825               		.stabs	"Set_LED:F(0,50)",36,0,355,Set_LED
 826               		.stabs	"State:P(5,2)",64,0,355,24
 827               	.global	Set_LED
 828               		.type	Set_LED, @function
 829               	Set_LED:
 830               		.stabd	46,0,0
 355:main.c        ****     if(State ==1){
 831               		.stabn	68,0,355,.LM83-.LFBB14
 832               	.LM83:
 833               	.LFBB14:
 834               	/* prologue: function */
 835               	/* frame size = 0 */
 836               	/* stack size = 0 */
 837               	.L__stack_usage = 0
 356:main.c        ****         PORTB |= (1 << PB5);    // Turns ON LED
 838               		.stabn	68,0,356,.LM84-.LFBB14
 839               	.LM84:
 840 0236 8130      		cpi r24,lo8(1)
 841 0238 01F4      		brne .L48
 842 023a 0C94 0000 		jmp Set_LED.part.1
 843               	.L48:
 360:main.c        ****     }
 844               		.stabn	68,0,360,.LM85-.LFBB14
 845               	.LM85:
 846 023e 2D98      		cbi 0x5,5
 847               	/* epilogue start */
 848               		.stabn	68,0,362,.LM86-.LFBB14
 849               	.LM86:
 850 0240 0895      		ret
 851               		.size	Set_LED, .-Set_LED
 852               	.Lscope14:
 853               		.stabs	"",36,0,0,.Lscope14-.LFBB14
 854               		.stabd	78,0,0
 855               		.stabs	"task_4:F(0,50)",36,0,226,task_4
 856               	.global	task_4
 857               		.type	task_4, @function
 858               	task_4:
 859               		.stabd	46,0,0
 226:main.c        ****     int MsgCounter = 0;
 860               		.stabn	68,0,226,.LM87-.LFBB15
 861               	.LM87:
GAS LISTING /tmp/cc2rabi0.s 			page 24


 862               	.LFBB15:
 863 0242 CF93      		push r28
 864 0244 DF93      		push r29
 865               	/* prologue: function */
 866               	/* frame size = 0 */
 867               	/* stack size = 2 */
 868               	.L__stack_usage = 2
 226:main.c        ****     int MsgCounter = 0;
 869               		.stabn	68,0,226,.LM88-.LFBB15
 870               	.LM88:
 871 0246 CCE2      		ldi r28,lo8(44)
 872 0248 D1E0      		ldi r29,lo8(1)
 873               	.L51:
 874               	.LBB61:
 233:main.c        ****         // If it reads the sync character, stops reading
 875               		.stabn	68,0,233,.LM89-.LFBB15
 876               	.LM89:
 877 024a 0E94 0000 		call ReadByte
 235:main.c        ****             break;
 878               		.stabn	68,0,235,.LM90-.LFBB15
 879               	.LM90:
 880 024e 8E37      		cpi r24,lo8(126)
 881 0250 01F0      		breq .L50
 882 0252 2197      		sbiw r28,1
 232:main.c        ****         ByteBuffer= ReadByte();    
 883               		.stabn	68,0,232,.LM91-.LFBB15
 884               	.LM91:
 885 0254 01F4      		brne .L51
 886               	.LBE61:
 244:main.c        ****         _delay_ms(5); // blocks 5 ms
 887               		.stabn	68,0,244,.LM92-.LFBB15
 888               	.LM92:
 889 0256 0E94 0000 		call flow_off
 890               	.LBB62:
 891               	.LBB63:
 892               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext1
 893               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
GAS LISTING /tmp/cc2rabi0.s 			page 25


  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
GAS LISTING /tmp/cc2rabi0.s 			page 26


  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
GAS LISTING /tmp/cc2rabi0.s 			page 27


 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 894               		.stabn	68,0,187,.LM93-.LFBB15
 895               	.LM93:
 896 025a 8FE1      		ldi r24,lo8(19999)
 897 025c 9EE4      		ldi r25,hi8(19999)
GAS LISTING /tmp/cc2rabi0.s 			page 28


 898 025e 0197      	1:	sbiw r24,1
 899 0260 01F4      		brne 1b
 900 0262 00C0      		rjmp .
 901 0264 0000      		nop
 902               	.L50:
 903               	.LBE63:
 904               	.LBE62:
 905               		.stabs	"main.c",132,0,0,.Ltext2
 906               	.Ltext2:
 249:main.c        ****         for(int i=0;i<5;i++){
 907               		.stabn	68,0,249,.LM94-.LFBB15
 908               	.LM94:
 909 0266 8091 0000 		lds r24,ByteReceived
 910 026a 8111      		cpse r24,__zero_reg__
 911 026c 00C0      		rjmp .L53
 912 026e 85E0      		ldi r24,lo8(5)
 913 0270 90E0      		ldi r25,0
 914               	.LBB64:
 251:main.c        ****             _delay_ms(1000);      // wait 1s
 915               		.stabn	68,0,251,.LM95-.LFBB15
 916               	.LM95:
 917 0272 30E2      		ldi r19,lo8(32)
 918               	.L54:
 251:main.c        ****             _delay_ms(1000);      // wait 1s
 919               		.stabn	68,0,251,.LM96-.LFBB15
 920               	.LM96:
 921 0274 23B1      		in r18,0x3
 922 0276 2327      		eor r18,r19
 923 0278 23B9      		out 0x3,r18
 924               	.LBB65:
 925               	.LBB66:
 926               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext3
 927               	.Ltext3:
 928               		.stabn	68,0,187,.LM97-.LFBB15
 929               	.LM97:
 930 027a 2FEF      		ldi r18,lo8(3199999)
 931 027c 43ED      		ldi r20,hi8(3199999)
 932 027e 50E3      		ldi r21,hlo8(3199999)
 933 0280 2150      	1:	subi r18,1
 934 0282 4040      		sbci r20,0
 935 0284 5040      		sbci r21,0
 936 0286 01F4      		brne 1b
 937 0288 00C0      		rjmp .
 938 028a 0000      		nop
 939 028c 0197      		sbiw r24,1
 940               	.LBE66:
 941               	.LBE65:
 942               		.stabs	"main.c",132,0,0,.Ltext4
 943               	.Ltext4:
 250:main.c        ****             PINB ^= (1 << PB5);   //toogle led
 944               		.stabn	68,0,250,.LM98-.LFBB15
 945               	.LM98:
 946 028e 01F4      		brne .L54
 947               	.L55:
 948               	.LBE64:
 261:main.c        **** }
 949               		.stabn	68,0,261,.LM99-.LFBB15
GAS LISTING /tmp/cc2rabi0.s 			page 29


 950               	.LM99:
 951 0290 80E0      		ldi r24,0
 952               	/* epilogue start */
 262:main.c        **** 
 953               		.stabn	68,0,262,.LM100-.LFBB15
 954               	.LM100:
 955 0292 DF91      		pop r29
 956 0294 CF91      		pop r28
 261:main.c        **** }
 957               		.stabn	68,0,261,.LM101-.LFBB15
 958               	.LM101:
 959 0296 0C94 0000 		jmp Set_LED
 960               	.L53:
 961               	.LBB67:
 962               	.LBB68:
 963 029a 0E94 0000 		call Set_LED.part.1
 964               	.LBE68:
 965               	.LBE67:
 966               	.LBB69:
 967               	.LBB70:
 968               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext5
 969               	.Ltext5:
 970               		.stabn	68,0,187,.LM102-.LFBB15
 971               	.LM102:
 972 029e 8FEF      		ldi r24,lo8(15999999)
 973 02a0 93E2      		ldi r25,hi8(15999999)
 974 02a2 24EF      		ldi r18,hlo8(15999999)
 975 02a4 8150      	1:	subi r24,1
 976 02a6 9040      		sbci r25,0
 977 02a8 2040      		sbci r18,0
 978 02aa 01F4      		brne 1b
 979 02ac 00C0      		rjmp .
 980 02ae 0000      		nop
 981 02b0 00C0      		rjmp .L55
 982               	.LBE70:
 983               	.LBE69:
 984               		.size	task_4, .-task_4
 985               	.Lscope15:
 986               		.stabs	"",36,0,0,.Lscope15-.LFBB15
 987               		.stabd	78,0,0
 988               		.section	.rodata
 989               	.LC0:
 990 0000 00        		.byte	0
 991 0001 01        		.byte	1
 992 0002 11        		.byte	17
 993 0003 02        		.byte	2
 994 0004 13        		.byte	19
 995 0005 04        		.byte	4
 996 0006 7E        		.byte	126
 997 0007 05        		.byte	5
 998 0008 7D        		.byte	125
 999 0009 06        		.byte	6
 1000               		.text
 1001               		.stabs	"task_6:F(0,50)",36,0,265,task_6
 1002               	.global	task_6
 1003               		.type	task_6, @function
 1004               	task_6:
GAS LISTING /tmp/cc2rabi0.s 			page 30


 1005               		.stabd	46,0,0
 1006               		.stabs	"main.c",132,0,0,.Ltext6
 1007               	.Ltext6:
 265:main.c        ****     uint8_t Binary_String[]={0x00, 0x01, 0x11, 0x02, 0x13, 0x04, 0x7e, 0x05, 0x7d, 0x06};
 1008               		.stabn	68,0,265,.LM103-.LFBB16
 1009               	.LM103:
 1010               	.LFBB16:
 1011 02b2 0F93      		push r16
 1012 02b4 1F93      		push r17
 1013 02b6 CF93      		push r28
 1014 02b8 DF93      		push r29
 1015 02ba CDB7      		in r28,__SP_L__
 1016 02bc DEB7      		in r29,__SP_H__
 1017 02be 2A97      		sbiw r28,10
 1018 02c0 0FB6      		in __tmp_reg__,__SREG__
 1019 02c2 F894      		cli
 1020 02c4 DEBF      		out __SP_H__,r29
 1021 02c6 0FBE      		out __SREG__,__tmp_reg__
 1022 02c8 CDBF      		out __SP_L__,r28
 1023               	/* prologue: function */
 1024               	/* frame size = 10 */
 1025               	/* stack size = 14 */
 1026               	.L__stack_usage = 14
 266:main.c        ****     uint8_t n_Bytes = sizeof(Binary_String)/sizeof(Binary_String[0]);
 1027               		.stabn	68,0,266,.LM104-.LFBB16
 1028               	.LM104:
 1029 02ca 8AE0      		ldi r24,lo8(10)
 1030 02cc E0E0      		ldi r30,lo8(.LC0)
 1031 02ce F0E0      		ldi r31,hi8(.LC0)
 1032 02d0 DE01      		movw r26,r28
 1033 02d2 1196      		adiw r26,1
 1034               		0:
 1035 02d4 0190      		ld r0,Z+
 1036 02d6 0D92      		st X+,r0
 1037 02d8 8A95      		dec r24
 1038 02da 01F4      		brne 0b
 269:main.c        **** 
 1039               		.stabn	68,0,269,.LM105-.LFBB16
 1040               	.LM105:
 1041 02dc 80E0      		ldi r24,0
 1042 02de 0E94 0000 		call Set_LED
 273:main.c        ****     
 1043               		.stabn	68,0,273,.LM106-.LFBB16
 1044               	.LM106:
 1045 02e2 40E0      		ldi r20,0
 1046 02e4 6AE0      		ldi r22,lo8(10)
 1047 02e6 CE01      		movw r24,r28
 1048 02e8 0196      		adiw r24,1
 1049 02ea 0E94 0000 		call write
 1050 02ee 182F      		mov r17,r24
 280:main.c        ****     }
 1051               		.stabn	68,0,280,.LM107-.LFBB16
 1052               	.LM107:
 1053 02f0 0AE0      		ldi r16,lo8(10)
 1054               	.L63:
 276:main.c        ****         Set_LED(1);                                                 // Turns on LED
 1055               		.stabn	68,0,276,.LM108-.LFBB16
GAS LISTING /tmp/cc2rabi0.s 			page 31


 1056               	.LM108:
 1057 02f2 1A30      		cpi r17,lo8(10)
 1058 02f4 00F0      		brlo .L65
 1059               	/* epilogue start */
 283:main.c        **** 
 1060               		.stabn	68,0,283,.LM109-.LFBB16
 1061               	.LM109:
 1062 02f6 2A96      		adiw r28,10
 1063 02f8 0FB6      		in __tmp_reg__,__SREG__
 1064 02fa F894      		cli
 1065 02fc DEBF      		out __SP_H__,r29
 1066 02fe 0FBE      		out __SREG__,__tmp_reg__
 1067 0300 CDBF      		out __SP_L__,r28
 1068 0302 DF91      		pop r29
 1069 0304 CF91      		pop r28
 1070 0306 1F91      		pop r17
 1071 0308 0F91      		pop r16
 1072 030a 0895      		ret
 1073               	.L65:
 1074               	.LBB71:
 1075               	.LBB72:
 1076 030c 0E94 0000 		call Set_LED.part.1
 1077               	.LBE72:
 1078               	.LBE71:
 1079               	.LBB73:
 1080               	.LBB74:
 207:main.c        **** }
 1081               		.stabn	68,0,207,.LM110-.LFBB16
 1082               	.LM110:
 1083 0310 8091 0000 		lds r24,FlowControl
 1084               	.LBE74:
 1085               	.LBE73:
 278:main.c        ****         Set_LED(0);                                                 // Sets LED =0;
 1086               		.stabn	68,0,278,.LM111-.LFBB16
 1087               	.LM111:
 1088 0314 8111      		cpse r24,__zero_reg__
 1089 0316 00C0      		rjmp .L68
 1090               	.L67:
 1091 0318 00C0      		rjmp .L67
 1092               	.L68:
 279:main.c        ****         n_sent = write(Binary_String+n_sent, n_Bytes-n_sent, 0);    // Resumes transmission (where 
 1093               		.stabn	68,0,279,.LM112-.LFBB16
 1094               	.LM112:
 1095 031a 80E0      		ldi r24,0
 1096 031c 0E94 0000 		call Set_LED
 280:main.c        ****     }
 1097               		.stabn	68,0,280,.LM113-.LFBB16
 1098               	.LM113:
 1099 0320 602F      		mov r22,r16
 1100 0322 611B      		sub r22,r17
 1101 0324 40E0      		ldi r20,0
 1102 0326 81E0      		ldi r24,lo8(1)
 1103 0328 90E0      		ldi r25,0
 1104 032a 8C0F      		add r24,r28
 1105 032c 9D1F      		adc r25,r29
 1106 032e 810F      		add r24,r17
 1107 0330 911D      		adc r25,__zero_reg__
GAS LISTING /tmp/cc2rabi0.s 			page 32


 1108 0332 0E94 0000 		call write
 1109 0336 182F      		mov r17,r24
 1110 0338 00C0      		rjmp .L63
 1111               		.size	task_6, .-task_6
 1112               		.stabs	"Binary_String:(0,53)=ar(0,52);0;9;(5,2)",128,0,266,1
 1113               		.stabs	"n_sent:r(5,2)",64,0,273,17
 1114               		.stabn	192,0,0,.LFBB16-.LFBB16
 1115               		.stabn	224,0,0,.Lscope16-.LFBB16
 1116               	.Lscope16:
 1117               		.stabs	"",36,0,0,.Lscope16-.LFBB16
 1118               		.stabd	78,0,0
 1119               		.stabs	"CompareMsg:F(0,50)",36,0,312,CompareMsg
 1120               		.stabs	"msg_1:P(0,54)=*(5,2)",64,0,312,24
 1121               		.stabs	"n:P(5,2)",64,0,312,20
 1122               	.global	CompareMsg
 1123               		.type	CompareMsg, @function
 1124               	CompareMsg:
 1125               		.stabd	46,0,0
 312:main.c        ****     uint8_t Is_equal = 1;
 1126               		.stabn	68,0,312,.LM114-.LFBB17
 1127               	.LM114:
 1128               	.LFBB17:
 1129               	/* prologue: function */
 1130               	/* frame size = 0 */
 1131               	/* stack size = 0 */
 1132               	.L__stack_usage = 0
 1133 033a FB01      		movw r30,r22
 1134               	.LBB75:
 321:main.c        ****         // If any byte is different, returns 0
 1135               		.stabn	68,0,321,.LM115-.LFBB17
 1136               	.LM115:
 1137 033c DC01      		movw r26,r24
 1138 033e 50E0      		ldi r21,0
 1139               	.L70:
 321:main.c        ****         // If any byte is different, returns 0
 1140               		.stabn	68,0,321,.LM116-.LFBB17
 1141               	.LM116:
 1142 0340 9D01      		movw r18,r26
 1143 0342 281B      		sub r18,r24
 1144 0344 390B      		sbc r19,r25
 1145 0346 2417      		cp r18,r20
 1146 0348 3507      		cpc r19,r21
 1147 034a 04F0      		brlt .L72
 1148               	.LBE75:
 1149               	.LBB76:
 1150               	.LBB77:
 1151 034c 0C94 0000 		jmp Set_LED.part.1
 1152               	.L72:
 1153               	.LBE77:
 1154               	.LBE76:
 1155               	.LBB78:
 323:main.c        ****             Is_equal = 0;
 1156               		.stabn	68,0,323,.LM117-.LFBB17
 1157               	.LM117:
 1158 0350 3D91      		ld r19,X+
 1159 0352 2191      		ld r18,Z+
 1160 0354 3217      		cp r19,r18
GAS LISTING /tmp/cc2rabi0.s 			page 33


 1161 0356 01F0      		breq .L70
 1162               	.LBE78:
 336:main.c        ****     }
 1163               		.stabn	68,0,336,.LM118-.LFBB17
 1164               	.LM118:
 1165 0358 80E0      		ldi r24,0
 1166 035a 0C94 0000 		jmp Set_LED
 1167               		.size	CompareMsg, .-CompareMsg
 1168               	.Lscope17:
 1169               		.stabs	"",36,0,0,.Lscope17-.LFBB17
 1170               		.stabd	78,0,0
 1171               		.section	.rodata.str1.1
 1172               	.LC2:
 1173 004a 4465 7365 		.string	"Desenvolvimento de sistemas embarcados"
 1173      6E76 6F6C 
 1173      7669 6D65 
 1173      6E74 6F20 
 1173      6465 2073 
 1174               		.text
 1175               		.stabs	"task_7_A:F(0,50)",36,0,286,task_7_A
 1176               	.global	task_7_A
 1177               		.type	task_7_A, @function
 1178               	task_7_A:
 1179               		.stabd	46,0,0
 286:main.c        ****     // receive package
 1180               		.stabn	68,0,286,.LM119-.LFBB18
 1181               	.LM119:
 1182               	.LFBB18:
 1183 035e CF93      		push r28
 1184 0360 DF93      		push r29
 1185 0362 CDB7      		in r28,__SP_L__
 1186 0364 DEB7      		in r29,__SP_H__
 1187 0366 CB58      		subi r28,-117
 1188 0368 D109      		sbc r29,__zero_reg__
 1189 036a 0FB6      		in __tmp_reg__,__SREG__
 1190 036c F894      		cli
 1191 036e DEBF      		out __SP_H__,r29
 1192 0370 0FBE      		out __SREG__,__tmp_reg__
 1193 0372 CDBF      		out __SP_L__,r28
 1194               	/* prologue: function */
 1195               	/* frame size = 139 */
 1196               	/* stack size = 141 */
 1197               	.L__stack_usage = 141
 288:main.c        ****     uint8_t buffer_1[100];
 1198               		.stabn	68,0,288,.LM120-.LFBB18
 1199               	.LM120:
 1200 0374 87E2      		ldi r24,lo8(39)
 1201 0376 E0E0      		ldi r30,lo8(.LC2)
 1202 0378 F0E0      		ldi r31,hi8(.LC2)
 1203 037a DE01      		movw r26,r28
 1204 037c AB59      		subi r26,-101
 1205 037e BF4F      		sbci r27,-1
 1206               		0:
 1207 0380 0190      		ld r0,Z+
 1208 0382 0D92      		st X+,r0
 1209 0384 8A95      		dec r24
 1210 0386 01F4      		brne 0b
GAS LISTING /tmp/cc2rabi0.s 			page 34


 293:main.c        ****     CompareMsg(buffer_1, msg_DSE,sizeof(msg_DSE));    // Compare and Light the led (if the 2 are th
 1211               		.stabn	68,0,293,.LM121-.LFBB18
 1212               	.LM121:
 1213 0388 67E2      		ldi r22,lo8(39)
 1214 038a CE01      		movw r24,r28
 1215 038c 0196      		adiw r24,1
 1216 038e 0E94 0000 		call read
 294:main.c        ****     
 1217               		.stabn	68,0,294,.LM122-.LFBB18
 1218               	.LM122:
 1219 0392 47E2      		ldi r20,lo8(39)
 1220 0394 BE01      		movw r22,r28
 1221 0396 6B59      		subi r22,-101
 1222 0398 7F4F      		sbci r23,-1
 1223 039a CE01      		movw r24,r28
 1224 039c 0196      		adiw r24,1
 1225 039e 0E94 0000 		call CompareMsg
 1226               	/* epilogue start */
 296:main.c        **** 
 1227               		.stabn	68,0,296,.LM123-.LFBB18
 1228               	.LM123:
 1229 03a2 C557      		subi r28,117
 1230 03a4 DF4F      		sbci r29,-1
 1231 03a6 0FB6      		in __tmp_reg__,__SREG__
 1232 03a8 F894      		cli
 1233 03aa DEBF      		out __SP_H__,r29
 1234 03ac 0FBE      		out __SREG__,__tmp_reg__
 1235 03ae CDBF      		out __SP_L__,r28
 1236 03b0 DF91      		pop r29
 1237 03b2 CF91      		pop r28
 1238 03b4 0895      		ret
 1239               		.size	task_7_A, .-task_7_A
 1240               		.stabs	"msg_DSE:(0,55)=ar(0,52);0;38;(5,2)",128,0,288,101
 1241               		.stabs	"buffer_1:(0,56)=ar(0,52);0;99;(5,2)",128,0,289,1
 1242               		.stabn	192,0,0,.LFBB18-.LFBB18
 1243               		.stabn	224,0,0,.Lscope18-.LFBB18
 1244               	.Lscope18:
 1245               		.stabs	"",36,0,0,.Lscope18-.LFBB18
 1246               		.stabd	78,0,0
 1247               		.stabs	"task_7_B:F(0,50)",36,0,299,task_7_B
 1248               	.global	task_7_B
 1249               		.type	task_7_B, @function
 1250               	task_7_B:
 1251               		.stabd	46,0,0
 299:main.c        ****     // receive package
 1252               		.stabn	68,0,299,.LM124-.LFBB19
 1253               	.LM124:
 1254               	.LFBB19:
 1255 03b6 CF93      		push r28
 1256 03b8 DF93      		push r29
 1257 03ba CDB7      		in r28,__SP_L__
 1258 03bc DEB7      		in r29,__SP_H__
 1259 03be E197      		sbiw r28,49
 1260 03c0 0FB6      		in __tmp_reg__,__SREG__
 1261 03c2 F894      		cli
 1262 03c4 DEBF      		out __SP_H__,r29
 1263 03c6 0FBE      		out __SREG__,__tmp_reg__
GAS LISTING /tmp/cc2rabi0.s 			page 35


 1264 03c8 CDBF      		out __SP_L__,r28
 1265               	/* prologue: function */
 1266               	/* frame size = 49 */
 1267               	/* stack size = 51 */
 1268               	.L__stack_usage = 51
 301:main.c        ****     uint8_t buffer_2[10];
 1269               		.stabn	68,0,301,.LM125-.LFBB19
 1270               	.LM125:
 1271 03ca 87E2      		ldi r24,lo8(39)
 1272 03cc E0E0      		ldi r30,lo8(.LC2)
 1273 03ce F0E0      		ldi r31,hi8(.LC2)
 1274 03d0 DE01      		movw r26,r28
 1275 03d2 1196      		adiw r26,1
 1276               		0:
 1277 03d4 0190      		ld r0,Z+
 1278 03d6 0D92      		st X+,r0
 1279 03d8 8A95      		dec r24
 1280 03da 01F4      		brne 0b
 306:main.c        ****     CompareMsg(buffer_2, msg_DSE,10);               // Compare and Light the led (if the 2 are the 
 1281               		.stabn	68,0,306,.LM126-.LFBB19
 1282               	.LM126:
 1283 03dc 6AE0      		ldi r22,lo8(10)
 1284 03de CE01      		movw r24,r28
 1285 03e0 8896      		adiw r24,40
 1286 03e2 0E94 0000 		call read
 307:main.c        ****     
 1287               		.stabn	68,0,307,.LM127-.LFBB19
 1288               	.LM127:
 1289 03e6 4AE0      		ldi r20,lo8(10)
 1290 03e8 BE01      		movw r22,r28
 1291 03ea 6F5F      		subi r22,-1
 1292 03ec 7F4F      		sbci r23,-1
 1293 03ee CE01      		movw r24,r28
 1294 03f0 8896      		adiw r24,40
 1295 03f2 0E94 0000 		call CompareMsg
 1296               	/* epilogue start */
 309:main.c        **** 
 1297               		.stabn	68,0,309,.LM128-.LFBB19
 1298               	.LM128:
 1299 03f6 E196      		adiw r28,49
 1300 03f8 0FB6      		in __tmp_reg__,__SREG__
 1301 03fa F894      		cli
 1302 03fc DEBF      		out __SP_H__,r29
 1303 03fe 0FBE      		out __SREG__,__tmp_reg__
 1304 0400 CDBF      		out __SP_L__,r28
 1305 0402 DF91      		pop r29
 1306 0404 CF91      		pop r28
 1307 0406 0895      		ret
 1308               		.size	task_7_B, .-task_7_B
 1309               		.stabs	"msg_DSE:(0,55)",128,0,301,1
 1310               		.stabs	"buffer_2:(0,53)",128,0,302,40
 1311               		.stabn	192,0,0,.LFBB19-.LFBB19
 1312               		.stabn	224,0,0,.Lscope19-.LFBB19
 1313               	.Lscope19:
 1314               		.stabs	"",36,0,0,.Lscope19-.LFBB19
 1315               		.stabd	78,0,0
 1316               	.global	ByteReceived
GAS LISTING /tmp/cc2rabi0.s 			page 36


 1317               		.section .bss
 1318               		.type	ByteReceived, @object
 1319               		.size	ByteReceived, 1
 1320               	ByteReceived:
 1321 0000 00        		.zero	1
 1322               		.stabs	"ByteReceived:G(5,2)",32,0,21,0
 1323               	.global	ReadyToSend
 1324               		.data
 1325               		.type	ReadyToSend, @object
 1326               		.size	ReadyToSend, 1
 1327               	ReadyToSend:
 1328 0000 01        		.byte	1
 1329               		.stabs	"ReadyToSend:G(5,2)",32,0,20,0
 1330               	.global	FlowControl
 1331               		.type	FlowControl, @object
 1332               		.size	FlowControl, 1
 1333               	FlowControl:
 1334 0001 01        		.byte	1
 1335               		.stabs	"FlowControl:G(5,2)",32,0,19,0
 1336               		.text
 1337               		.stabs	"",100,0,0,.Letext0
 1338               	.Letext0:
 1339               		.ident	"GCC: (GNU) 7.3.0"
 1340               	.global __do_copy_data
 1341               	.global __do_clear_bss
GAS LISTING /tmp/cc2rabi0.s 			page 37


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc2rabi0.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc2rabi0.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc2rabi0.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc2rabi0.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc2rabi0.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc2rabi0.s:107    .text:0000000000000000 Set_LED.part.1
     /tmp/cc2rabi0.s:130    .text:0000000000000004 __vector_19
     /tmp/cc2rabi0.s:1327   .data:0000000000000000 ReadyToSend
     /tmp/cc2rabi0.s:165    .text:0000000000000022 is_flow_on
     /tmp/cc2rabi0.s:1333   .data:0000000000000001 FlowControl
     /tmp/cc2rabi0.s:187    .text:0000000000000028 SendByte
     /tmp/cc2rabi0.s:223    .text:000000000000003c write
     /tmp/cc2rabi0.s:343    .text:00000000000000a4 task_2
     /tmp/cc2rabi0.s:405    .text:00000000000000ec task_3
     /tmp/cc2rabi0.s:468    .text.startup:0000000000000000 main
     /tmp/cc2rabi0.s:534    .text:0000000000000134 flow_off
     /tmp/cc2rabi0.s:565    .text:0000000000000146 flow_on
     /tmp/cc2rabi0.s:597    .text:000000000000015a __vector_18
     /tmp/cc2rabi0.s:1320   .bss:0000000000000000 ByteReceived
     /tmp/cc2rabi0.s:672    .text:00000000000001bc ReadByte
     /tmp/cc2rabi0.s:710    .text:00000000000001d0 read
     /tmp/cc2rabi0.s:829    .text:0000000000000236 Set_LED
     /tmp/cc2rabi0.s:858    .text:0000000000000242 task_4
     /tmp/cc2rabi0.s:1004   .text:00000000000002b2 task_6
     /tmp/cc2rabi0.s:1124   .text:000000000000033a CompareMsg
     /tmp/cc2rabi0.s:1178   .text:000000000000035e task_7_A
     /tmp/cc2rabi0.s:1250   .text:00000000000003b6 task_7_B

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
